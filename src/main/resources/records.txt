
前端

*************
场景：upload，delete等操作会重载整个页面
方案：用message.service控制状态更新。
1) 每个操作同时生成新的message, 即alert_new
2) 有alert_new生成时，source的next方法发送事件。
3) 组件内监视status$, 有alert_new就刷新。

*************
场景：需要翻译结束时自动刷新（不永久刷新）。
方案1：单个全局计时器。
1) 设置全局变量processEmitor发送processing事件；用processingStart避免重复发送。processEmitor$监视Emitor是否发送并后处理
2) 开始发送时，状态被Emitor$获取并开始处理(newIntervalRefresh方法)，用interval持续请求获取所有文件状态(getXmls方法)并刷新，期间若有其他文件处理请求用processingStart判断。
3) 直到所有文件status不为3(或5)的时候，退出观察并重新设置processingStart。

应该有其他更清楚简便的方法。。比如检查interval状态什么的。。目前没找。。

方案2：多个计时器。
对单个文件开始处理时用interval方法持续获取该xml的状态(getOneXml方法)，如果xml的status为4,
即翻译完成，则停止请求。多个文件需要多个interval。注意不能用全局计时器subscribe变量。多个文件同时处理时，后面的设置会覆盖前面的，致使全局计时器停止时，
前面的计时器仍然无法停止发送请求。

采用方案1

*************
场景：在翻译或者生成报告的持续期间内delete数据，会造成后续请求的内容为空，检查状态出现错误。另外，删除文件后，还未翻译的xmltag
仍然会请求翻译并储存入数据库。
方案1：前端页面翻译处理期间将delete按钮设置为不可点击
方案2：后端在持续处理期间每次save到数据库(包括xml和xmltag)的时候判断该xml是否存在，如不存在则停止处理
采用方案2

*************
场景：加入点击某行高亮功能，以便了解所选文件
方案：用[ngClass]判断当前row的id与所选id是否相同，以此来切换不同的css样式，包括按钮和文字


*************
场景：加入网络链接检查功能，若未链接给出警示

待加入


*************



后端：

*************
场景：需要先替换专业词汇为标识符，再申请翻译，然后替换为专业词汇
方案：每次翻译文件前，先读入专业词汇文件，将文件转换为两个hashmap，一个为
key-index，一个为index-value，用正则遍历文件字符串找符合条件的词汇(即key)用hashmap转换为"TBR_{index}"形式，形成
模板字符串，再将翻译的结果根据index-value替换为翻译(即value)。
注意此时先不写入文件，如有前端update翻译，随之更新数据库，当有Generate请求时再将最后结果写入之前定义的模板字符串，即最后文件。

*************
场景：加入网络链接检查功能，若未链接给出警示

待加入


*************

